import numpy as np

models = ['logistic regression', 'knn', 'decision tree', 'random forest', 'ada boost', 'naive bayes', 'xgboost',
          'svc', 'gaussian process', 'mlp', 'sgd', 'gradient boosting']

# Reading intermediate results (accuracy and f1 score) generated by the example scripts of DQ computation

# When trusted test data are available accuracy and f1 score are computed once for each model,
# which results in 12 scores
ex_spambase_accs = np.load("output/base_scores/example_spambase_15_outlier_base_accs.npy")
ex_spambase_f1s = np.load("output/base_scores/example_spambase_15_outlier_base_f1s.npy")

ex_statlog_accs = np.load("output/base_scores/example_statlog_10_outlier_base_accs.npy")
ex_statlog_f1s = np.load("output/base_scores/example_statlog_10_outlier_base_f1s.npy")

# When trusted test data are not available accuracy and f1 score are computed for 30 samplings of train and test for
# each model, which results in 360 (30x12) scores
ex_cancer_accs = np.load("output/base_scores/example_cancer_5_missing_base_accs.npy")
ex_cancer_f1s = np.load("output/base_scores/example_cancer_5_missing_base_f1s.npy")

ex_iris_accs = np.load("output/base_scores/example_iris_30_missing_noTest_base_accs.npy")
ex_iris_f1s = np.load("output/base_scores/example_iris_30_missing_noTest_base_f1s.npy")
