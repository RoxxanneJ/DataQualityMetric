import numpy as np

models = ['logistic regression', 'knn', 'decision tree', 'random forest', 'ada boost', 'naive bayes', 'xgboost',
          'svc', 'gaussian process', 'mlp', 'sgd', 'gradient boosting']
crt_names = ['missing', 'fuzzing', 'outlier']

# Reading intermediate results (accuracy and f1 scores when 5% of the errors in crt_names are injected in data)
# generated by the example scripts of DQ computation

# When trusted test data are available accuracy and f1 score are computed once for each error type and model,
# which results in 36 (12x3) scores
ex_adult_accs = np.load("output/variations/example_adult_15_outlier_var_accs.npy")
ex_adult_f1s = np.load("output/variations/example_adult_15_outlier_var_f1s.npy")
print("\n****** Adult with 15% of outliers ******\n")
for k in range(len(models)):
    print(models[k])
    for e in range(len(crt_names)):
        print("   5% of ", crt_names[e], "is injected in data:",
              "\n      accuracy=", ex_adult_accs[k][e], " f1 score=", ex_adult_f1s[k][e])

ex_statlog_accs = np.load("output/variations/example_statlog_10_outlier_var_accs.npy")
ex_statlog_f1s = np.load("output/variations/example_statlog_10_outlier_var_f1s.npy")
print("\n****** Statlog with 10% of outliers ******\n")
for k in range(len(models)):
    print(models[k])
    for e in range(len(crt_names)):
        print("   5% of ", crt_names[e], "is injected in data:",
              "\n      accuracy=", ex_statlog_accs[k][e], " f1 score=", ex_statlog_f1s[k][e])

# When trusted test data are not available accuracy and f1 score are computed for 30 samplings of train and test for
# each error type and model, which results in 1080 (30x12x3) scores
ex_cancer_accs = np.load("output/variations/example_cancer_5_missing_var_accs.npy")
ex_cancer_accs = np.mean(ex_cancer_accs, axis=0)  # We compute the mean of the 30 samplings
ex_cancer_f1s = np.load("output/variations/example_cancer_5_missing_var_f1s.npy")
ex_cancer_f1s = np.mean(ex_cancer_f1s, axis=0)
print("\n****** Breast Cancer with 5% of missing values ******\n")
for k in range(len(models)):
    print(models[k])
    for e in range(len(crt_names)):
        print("   5% of ", crt_names[e], "is injected in data:",
              "\n      accuracy=", ex_cancer_accs[k][e], " f1 score=", ex_cancer_f1s[k][e])

ex_iris_accs = np.load("output/variations/example_iris_30_missing_noTest_var_accs.npy")
ex_iris_accs = np.mean(ex_iris_accs, axis=0)  # We compute the mean of the 30 samplings
ex_iris_f1s = np.load("output/variations/example_iris_30_missing_noTest_var_f1s.npy")
ex_iris_f1s = np.mean(ex_iris_f1s, axis=0)
print("\n****** Iris with 30% of missing values ******\n")
for k in range(len(models)):
    print(models[k])
    for e in range(len(crt_names)):
        print("   5% of ", crt_names[e], "is injected in data:",
              "\n      accuracy=", ex_iris_accs[k][e], " f1 score=", ex_iris_f1s[k][e])
